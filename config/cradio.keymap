// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q        &kp W           &kp E  &kp R      &kp T             &kp Y            &kp U       &kp I      &kp O              &kp P
  &ht LSHFT A  &kp S           &kp D  &kp F      &kp G             &kp H            &kp J       &kp K      &kp L              &ht RSHFT SQT
  &ht LCTRL Z  &ht LEFT_ALT X  &kp C  &kp V      &ht LEFT_WIN B    &ht RIGHT_WIN N  &kp M       &kp COMMA  &ht RIGHT_ALT DOT  &ht RCTRL FSLH
                                      &lt 2 TAB  &kp SPACE         &kp ENTER        &lt 1 BSPC
            >;
        };

        right_layer {
            bindings = <
  &kp RA(Q)   &none      &none  &none   &kp PAGE_UP      &kp RA(Y)  &kp HOME  &kp INSERT  &kp END          &kp RA(P)
  &kp LSHIFT  &kp RA(S)  &none  &none   &none            &kp LEFT   &kp DOWN  &kp UP      &kp RIGHT_ARROW  &kp RSHIFT
  &kp LCTRL   &kp LALT   &none  &none   &kp PAGE_DOWN    &kp DEL    &none     &none       &kp RALT         &kp RCTRL
                                &trans  &trans           &trans     &trans
            >;
        };

        left_layer {
            bindings = <
  &kp RA(RS(SEMI))  &kp LBKT            &kp LBRC    &kp RBRC       &kp PIPE      &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT       &kp TILDE
  &ht LSHFT EXCL    &kp AT              &kp HASH    &kp DLLR       &kp PRCNT     &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH       &ht RSHIFT GRAVE
  &kp LCTRL         &ht LALT RA(RS(S))  &kp RA(N5)  &kp BACKSLASH  &kp ESCAPE    &kp AMPS   &kp UNDER  &kp PLUS   &ht RALT PIPE  &kp RCTRL
                                                    &trans         &trans        &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6      &kp F7          &kp F8  &kp F9   &kp F10
  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6      &kp N7          &kp N8  &kp N9   &kp N0
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_CLR  &bt BT_CLR_ALL  &none   &kp F11  &kp F12
                                            &trans        &trans          &trans      &trans
            >;
        };
    };
};
